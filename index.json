[{"content":" Quick links # Resources Details New Testament Psalm 20:7 (Global) CM by Moomoocow Scroll to find the CM stuff PureDB Friend Search Index Support Card Tier List euophrys (Does not account for skills, purely stats) Skill Spreadsheet dylank0 Training Event Helper Parenting \u0026amp; Gene Guide crazyfellow G1 Race Factors Race Simulator (EN) Race Simulator (JP) Stamina vs Guts # Distance/Type Guts Threshold Short 210 Mile/Dirt 260 Mid 320 Long (3000m) 380 Long (3600m) 440 Required Stamina Chart # Distance Front Pace Late End Sprint - 1400m 460 520 490 500 Mile - 1800m 700 790 740 750 Risky Mile - 1800m + 1 Gold 540 620 580 590 Medium - 2400m 980 1100 1020 1040 Risky Med - 2400m + 1 Gold 770 880 820 830 Long - 2600m 1160 1200 1200 990 Risky Long - 2600m + 1–2 Gold 920 1050 980 780 Long - 3200m + 2 Gold 940 1070 980 1000 SP Needed # Rarity Start Level End Level Required Support Points Money Needed SSR Lv0 Lv30 23,885 47,770 SSR Lv29 Lv35 13,900 27,800 SSR Lv34 Lv40 19,150 38,300 SSR Lv39 Lv45 26,000 52,000 SSR Lv44 Lv50 35,250 70,500 SSR Lv0 Lv50 118,185 236,370 SR Lv0 Lv25 10,740 21,480 SR Lv24 Lv30 8,350 16,700 SR Lv29 Lv35 12,600 25,200 SR Lv34 Lv40 18,100 36,200 SR Lv39 Lv45 25,200 50,400 SR Lv0 Lv45 74,990 149,980 ","date":"9 September 2025","externalUrl":null,"permalink":"/uma/","section":"","summary":"","title":"","type":"page"},{"content":"","date":"9 September 2025","externalUrl":null,"permalink":"/uma/foo/","section":"Foos","summary":"","title":"Foos","type":"foo"},{"content":"❯ python3 gacha_calc.py 2000000\nPull Count Cumulative % 1 9962 0.4981 2 9888 0.9925 3 10137 1.4993 4 10031 2.0009 5 10148 2.5083 6 9962 3.0064 7 9976 3.5052 8 9935 4.0019 9 9935 4.4987 10 9907 4.994 11 9915 5.4898 12 10067 5.9931 13 10028 6.4946 14 10098 6.9995 15 9976 7.4982 16 9837 7.9901 17 9753 8.4778 18 9804 8.968 19 9959 9.4659 20 9877 9.9597 21 9950 10.4573 22 9600 10.9373 23 9907 11.4326 24 9944 11.9298 25 9741 12.4169 26 9746 12.9041 27 9727 13.3905 28 9669 13.8739 29 9629 14.3554 30 9640 14.8374 31 9707 15.3227 32 9547 15.8001 33 9585 16.2794 34 9382 16.7485 35 9545 17.2257 36 9401 17.6958 37 9367 18.1641 38 9202 18.6242 39 9462 19.0973 40 9404 19.5675 41 9439 20.0394 42 9429 20.5109 43 9290 20.9754 44 9395 21.4451 45 9267 21.9085 46 9370 22.377 47 9373 22.8456 48 9301 23.3107 49 9205 23.7709 50 9203 24.2311 51 9220 24.6921 52 9039 25.1441 53 8922 25.5902 54 9083 26.0443 55 8820 26.4853 56 8965 26.9336 57 8936 27.3803 58 34132 29.087 59 56978 31.9358 60 74114 35.6416 61 83952 39.8392 62 85808 44.1296 63 79842 48.1217 64 69624 51.6029 65 57132 54.4594 66 44221 56.6705 67 33212 58.3311 68 25142 59.5882 69 19386 60.5575 70 18013 61.4582 71 12748 62.0956 72 12566 62.7239 73 12327 63.3402 74 12174 63.9489 75 12111 64.5545 76 12014 65.1551 77 11600 65.7352 78 11342 66.3023 79 11195 66.862 80 11103 67.4172 81 11026 67.9685 82 10749 68.5059 83 10590 69.0354 84 10741 69.5725 85 10398 70.0924 86 10224 70.6035 87 10160 71.1115 88 9832 71.6031 89 9590 72.0827 90 9711 72.5682 91 9437 73.0401 92 9494 73.5147 93 9259 73.9777 94 9042 74.4298 95 8845 74.8721 96 8817 75.3129 97 8950 75.7604 98 8701 76.1954 99 8486 76.6197 100 8524 77.0459 101 8335 77.4627 102 8104 77.8679 103 7960 78.2659 104 7967 78.6642 105 7927 79.0606 106 7611 79.4412 107 7615 79.8219 108 7368 80.1903 109 7293 80.555 110 7216 80.9158 111 7083 81.2699 112 7114 81.6256 113 6912 81.9712 114 6780 82.3102 115 6778 82.6491 116 7068 83.0025 117 8883 83.4467 118 11952 84.0443 119 16233 84.8559 120 20824 85.8971 121 25741 87.1842 122 29501 88.6592 123 31956 90.257 124 32699 91.8919 125 32013 93.4926 126 29045 94.9449 127 25283 96.209 128 21033 97.2606 129 17003 98.1108 130 12794 98.7505 131 9211 99.2111 132 6178 99.5199 133 4113 99.7256 134 2544 99.8528 135 1501 99.9278 136 776 99.9667 137 383 99.9858 138 183 99.995 139 69 99.9984 140 32 100.0 Code # import random import argparse from typing import List from tabulate import tabulate PITY = 70 SOFT_PITY_START = 58 SOFT_PITY_INCREMENT = .045 RATE = .01 def soft_pity_calc(i: int) -\u0026gt; float: # Pity rate for a SSR if i \u0026lt; SOFT_PITY_START: return RATE if i == PITY: return 1.0 return RATE + (i - SOFT_PITY_START + 1) * SOFT_PITY_INCREMENT def gacha_until_rate_up() -\u0026gt; int: \u0026#34;\u0026#34;\u0026#34; Returns the random variable pull count needed to get the target rate up \u0026#34;\u0026#34;\u0026#34; # soft_count is used to determine the soft pity probability increase at SOFT_PITY_START count = soft_count = 0 rolled_qiqi = False for _ in range(PITY * 2): soft_count, count = soft_count + 1, count + 1 # Rolled an SSR if random.random() \u0026lt; soft_pity_calc(soft_count): # 50/50 pity or won 50/50 if rolled_qiqi or random.random() \u0026lt; .5: return count else: rolled_qiqi = True soft_count = 0 # return count def sim(trials: int) -\u0026gt; List[int]: \u0026#34;\u0026#34;\u0026#34; Given a number of trials, output an array where the ith value is the amount of people that have gotten their wife at that pull \u0026#34;\u0026#34;\u0026#34; # pulls_to_gacha[i] += 1 if received morry\u0026#39;s wife at the ith pull pulls_to_gacha = [0 for _ in range(PITY * 2 + 1)] for _ in range(trials): pulls_to_gacha[gacha_until_rate_up()] += 1 return pulls_to_gacha def gacha_table(sim_results: List[int]) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34; Takes the output of sim(trials) and prints a table with: - Pull number - Number of players who got the target at that pull - Cumulative % of players who have obtained the target by that pull \u0026#34;\u0026#34;\u0026#34; total_players = sum(sim_results) cumulative = 0 table = [] for pull, count in enumerate(sim_results): if count == 0: continue # skip pulls with zero counts cumulative += count cumulative_pct = cumulative / total_players * 100 table.append([pull, count, round(cumulative_pct, 4)]) print(tabulate(table, headers=[\u0026#34;Pull\u0026#34;, \u0026#34;Count\u0026#34;, \u0026#34;Cumulative %\u0026#34;], tablefmt=\u0026#34;pretty\u0026#34;)) def main(): parser = argparse.ArgumentParser( description=\u0026#34;morry\u0026#34; ) parser.add_argument( \u0026#34;trials\u0026#34;, type=int, help=\u0026#34;Number of times to gacha sim\u0026#34; ) args = parser.parse_args() gacha_table(sim(args.trials)) # print(soft_pity_calc(58)) # print(soft_pity_calc(69)) # print(soft_pity_calc(70)) if __name__ == \u0026#34;__main__\u0026#34;: main() ","date":"9 September 2025","externalUrl":null,"permalink":"/uma/foo/morry/","section":"Foos","summary":"","title":"Morry","type":"foo"},{"content":"","date":"4 August 2025","externalUrl":null,"permalink":"/uma/cm/","section":"CM","summary":"","title":"CM","type":"cm"},{"content":" TODO # some bullshit that shows my shitty horses/lineages and maybe the slurs they should be called if they lose unsure no writeup just archival for the memories and my perusal wqewq\n","date":"4 August 2025","externalUrl":null,"permalink":"/uma/cm/taurus-08-17-2025/","section":"CM","summary":"","title":"Taurus Cup - 8/17/2025","type":"cm"},{"content":"","externalUrl":null,"permalink":"/uma/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/uma/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/uma/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/uma/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]